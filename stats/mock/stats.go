// Code generated by MockGen. DO NOT EDIT.
// Source: stats.go

// Package statsmock is a generated GoMock package.
package statsmock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	stats "github.com/hadan/gogox/stats"
)

// MockStats is a mock of Stats interface.
type MockStats struct {
	ctrl     *gomock.Controller
	recorder *MockStatsMockRecorder
}

// MockStatsMockRecorder is the mock recorder for MockStats.
type MockStatsMockRecorder struct {
	mock *MockStats
}

// NewMockStats creates a new mock instance.
func NewMockStats(ctrl *gomock.Controller) *MockStats {
	mock := &MockStats{ctrl: ctrl}
	mock.recorder = &MockStatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStats) EXPECT() *MockStatsMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockStats) Add(metric string, value float64, opt stats.Option) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", metric, value, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockStatsMockRecorder) Add(metric, value, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStats)(nil).Add), metric, value, opt)
}

// Gauge mocks base method.
func (m *MockStats) Gauge(metric string, value float64, opt stats.Option) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gauge", metric, value, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Gauge indicates an expected call of Gauge.
func (mr *MockStatsMockRecorder) Gauge(metric, value, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauge", reflect.TypeOf((*MockStats)(nil).Gauge), metric, value, opt)
}

// Histogram mocks base method.
func (m *MockStats) Histogram(metric string, value float64, opt stats.Option) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Histogram", metric, value, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Histogram indicates an expected call of Histogram.
func (mr *MockStatsMockRecorder) Histogram(metric, value, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Histogram", reflect.TypeOf((*MockStats)(nil).Histogram), metric, value, opt)
}

// Increment mocks base method.
func (m *MockStats) Increment(metric string, opt stats.Option) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increment", metric, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Increment indicates an expected call of Increment.
func (mr *MockStatsMockRecorder) Increment(metric, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockStats)(nil).Increment), metric, opt)
}
