// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go

// Package logmock is a generated GoMock package.
package logmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	log "github.com/raymondwongso/gogox/log"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
}

// Debugw mocks base method.
func (m *MockLogger) Debugw(msg string, md log.Metadata, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg, md}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugw", varargs...)
}

// Debugw indicates an expected call of Debugw.
func (mr *MockLoggerMockRecorder) Debugw(msg, md interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg, md}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugw", reflect.TypeOf((*MockLogger)(nil).Debugw), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Errorw mocks base method.
func (m *MockLogger) Errorw(msg string, md log.Metadata, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg, md}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorw", varargs...)
}

// Errorw indicates an expected call of Errorw.
func (mr *MockLoggerMockRecorder) Errorw(msg, md interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg, md}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorw", reflect.TypeOf((*MockLogger)(nil).Errorw), varargs...)
}

// Fatal mocks base method.
func (m *MockLogger) Fatal(msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerMockRecorder) Fatal(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), varargs...)
}

// Fatalw mocks base method.
func (m *MockLogger) Fatalw(msg string, md log.Metadata, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg, md}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalw", varargs...)
}

// Fatalw indicates an expected call of Fatalw.
func (mr *MockLoggerMockRecorder) Fatalw(msg, md interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg, md}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalw", reflect.TypeOf((*MockLogger)(nil).Fatalw), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// Infow mocks base method.
func (m *MockLogger) Infow(msg string, md log.Metadata, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg, md}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infow", varargs...)
}

// Infow indicates an expected call of Infow.
func (mr *MockLoggerMockRecorder) Infow(msg, md interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg, md}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infow", reflect.TypeOf((*MockLogger)(nil).Infow), varargs...)
}

// Log mocks base method.
func (m *MockLogger) Log(level log.LogLevel, msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{level, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log.
func (mr *MockLoggerMockRecorder) Log(level, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{level, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLogger)(nil).Log), varargs...)
}

// Logw mocks base method.
func (m *MockLogger) Logw(level log.LogLevel, msg string, md log.Metadata, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{level, msg, md}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Logw", varargs...)
}

// Logw indicates an expected call of Logw.
func (mr *MockLoggerMockRecorder) Logw(level, msg, md interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{level, msg, md}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logw", reflect.TypeOf((*MockLogger)(nil).Logw), varargs...)
}

// Panic mocks base method.
func (m *MockLogger) Panic(msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panic", varargs...)
}

// Panic indicates an expected call of Panic.
func (mr *MockLoggerMockRecorder) Panic(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockLogger)(nil).Panic), varargs...)
}

// Panicw mocks base method.
func (m *MockLogger) Panicw(msg string, md log.Metadata, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg, md}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panicw", varargs...)
}

// Panicw indicates an expected call of Panicw.
func (mr *MockLoggerMockRecorder) Panicw(msg, md interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg, md}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panicw", reflect.TypeOf((*MockLogger)(nil).Panicw), varargs...)
}

// Trace mocks base method.
func (m *MockLogger) Trace(msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Trace", varargs...)
}

// Trace indicates an expected call of Trace.
func (mr *MockLoggerMockRecorder) Trace(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockLogger)(nil).Trace), varargs...)
}

// Tracew mocks base method.
func (m *MockLogger) Tracew(msg string, md log.Metadata, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg, md}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Tracew", varargs...)
}

// Tracew indicates an expected call of Tracew.
func (mr *MockLoggerMockRecorder) Tracew(msg, md interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg, md}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tracew", reflect.TypeOf((*MockLogger)(nil).Tracew), varargs...)
}

// Warn mocks base method.
func (m *MockLogger) Warn(msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
}

// Warnw mocks base method.
func (m *MockLogger) Warnw(msg string, md log.Metadata, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg, md}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnw", varargs...)
}

// Warnw indicates an expected call of Warnw.
func (mr *MockLoggerMockRecorder) Warnw(msg, md interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg, md}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnw", reflect.TypeOf((*MockLogger)(nil).Warnw), varargs...)
}
